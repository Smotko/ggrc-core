
.. WARNING! This file is autogenerated and should not be edited manually.

Models
======

``ContextImplication``
----------------------

..  class:: ggrc_basic_permissions.models.ContextImplication

    A roles implication between two contexts. An implication may be scoped
    with additional scoping properties on the target and source contexts. The
    meaning of the scoping properties is determined by the module that
    contributed the implication. For example, an implication may be scoped based
    on the related objects of the contexts such as from a Program context to
    an Audit context.

    Schema:

    ..  code-block:: sql

        CREATE TABLE context_implications (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	context_id INTEGER, 
        	source_context_id INTEGER, 
        	context_scope VARCHAR(250), 
        	source_context_scope VARCHAR(250), 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id), 
        	FOREIGN KEY(source_context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Role``
--------

..  class:: ggrc_basic_permissions.models.Role

    A user role. All roles have a unique name. This name could be a simple
    string, an email address, or some other form of string identifier.
    
    Example:
    
    ..  code-block:: python
    
        {
          'create': ['Program', 'Control'],
          'read': ['Program', 'Control'],
          'update': ['Program', 'Control'],
          'delete': ['Program'],
        }

    Schema:

    ..  code-block:: sql

        CREATE TABLE roles (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(128) NOT NULL, 
        	permissions_json TEXT NOT NULL, 
        	scope VARCHAR(64), 
        	role_order INTEGER, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	description TEXT, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.models.mixins.Described`


``UserRole``
------------

..  class:: ggrc_basic_permissions.models.UserRole

    ..  warning::
        Missing doc-string of ``ggrc_basic_permissions.models.UserRole``

    Schema:

    ..  code-block:: sql

        CREATE TABLE user_roles (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	role_id INTEGER NOT NULL, 
        	person_id INTEGER NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(role_id) REFERENCES roles (id), 
        	FOREIGN KEY(person_id) REFERENCES people (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


