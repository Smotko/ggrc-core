
.. WARNING! This file is autogenerated and should not be edited manually.

Models
======

``AccessControlList``
---------------------

..  class:: ggrc.access_control.list.AccessControlList

    Access Control List
    
    Model is a mapping between a role a person and an object. It gives the
    permission of the role to the person from that object.

    Schema:

    ..  code-block:: sql

        CREATE TABLE access_control_list (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	person_id INTEGER NOT NULL, 
        	ac_role_id INTEGER NOT NULL, 
        	object_id INTEGER NOT NULL, 
        	object_type VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	UNIQUE (person_id, ac_role_id, object_id, object_type), 
        	FOREIGN KEY(person_id) REFERENCES people (id), 
        	FOREIGN KEY(ac_role_id) REFERENCES access_control_roles (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``AccessControlRole``
---------------------

..  class:: ggrc.access_control.role.AccessControlRole

    Access Control Role
    
    Model holds all roles in the application. These roles can be added
    by the users.

    Schema:

    ..  code-block:: sql

        CREATE TABLE access_control_roles (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(250) NOT NULL, 
        	object_type VARCHAR(250), 
        	tooltip VARCHAR(250), 
        	`read` BOOL NOT NULL, 
        	`update` BOOL NOT NULL, 
        	`delete` BOOL NOT NULL, 
        	my_work BOOL NOT NULL, 
        	mandatory BOOL NOT NULL, 
        	non_editable BOOL NOT NULL, 
        	default_to_current_user BOOL NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	UNIQUE (name, object_type), 
        	CHECK (`read` IN (0, 1)), 
        	CHECK (`update` IN (0, 1)), 
        	CHECK (`delete` IN (0, 1)), 
        	CHECK (my_work IN (0, 1)), 
        	CHECK (mandatory IN (0, 1)), 
        	CHECK (non_editable IN (0, 1)), 
        	CHECK (default_to_current_user IN (0, 1)), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.fulltext.mixin.Indexed`
    *   :class:`ggrc.models.mixins.attributevalidator.AttributeValidator`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``AttributeDefinitions``
------------------------

..  class:: ggrc.data_platform.attribute_definitions.AttributeDefinitions

    Attribute Definition model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE attribute_definitions (
        	created_at DATETIME NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	attribute_definition_id INTEGER NOT NULL AUTO_INCREMENT, 
        	attribute_type_id INTEGER, 
        	name VARCHAR(255) NOT NULL, 
        	display_name VARCHAR(255) NOT NULL, 
        	namespace_id INTEGER, 
        	updated_by_id INTEGER, 
        	created_by_id INTEGER, 
        	PRIMARY KEY (attribute_definition_id), 
        	FOREIGN KEY(attribute_type_id) REFERENCES attribute_types (attribute_type_id), 
        	FOREIGN KEY(namespace_id) REFERENCES namespaces (namespace_id), 
        	FOREIGN KEY(updated_by_id) REFERENCES people (id), 
        	FOREIGN KEY(created_by_id) REFERENCES people (id)
        )

    Mixins:

    *   :class:`ggrc.data_platform.base.Base`


``AttributeTemplates``
----------------------

..  class:: ggrc.data_platform.attribute_templates.AttributeTemplates

    Attribute templates model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE attribute_templates (
        	created_at DATETIME NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	attribute_template_id INTEGER NOT NULL AUTO_INCREMENT, 
        	attribute_definition_id INTEGER, 
        	object_template_id INTEGER, 
        	namespace_id INTEGER, 
        	`order` INTEGER, 
        	mandatory BOOL, 
        	`unique` BOOL, 
        	help_text TEXT, 
        	options TEXT, 
        	default_value TEXT, 
        	`read_only` BOOL, 
        	updated_by_id INTEGER, 
        	created_by_id INTEGER, 
        	PRIMARY KEY (attribute_template_id), 
        	FOREIGN KEY(attribute_definition_id) REFERENCES attribute_definitions (attribute_definition_id), 
        	FOREIGN KEY(object_template_id) REFERENCES object_templates (object_template_id), 
        	FOREIGN KEY(namespace_id) REFERENCES namespaces (namespace_id), 
        	CHECK (mandatory IN (0, 1)), 
        	CHECK (`unique` IN (0, 1)), 
        	CHECK (`read_only` IN (0, 1)), 
        	FOREIGN KEY(updated_by_id) REFERENCES people (id), 
        	FOREIGN KEY(created_by_id) REFERENCES people (id)
        )

    Mixins:

    *   :class:`ggrc.data_platform.base.Base`


``AttributeTypes``
------------------

..  class:: ggrc.data_platform.attribute_types.AttributeTypes

    Attribute types model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE attribute_types (
        	created_at DATETIME NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	attribute_type_id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(255) NOT NULL, 
        	field_type VARCHAR(255) NOT NULL, 
        	db_column_name VARCHAR(50) NOT NULL, 
        	computed BOOL NOT NULL, 
        	aggregate_function TEXT, 
        	namespace_id INTEGER, 
        	updated_by_id INTEGER, 
        	created_by_id INTEGER, 
        	PRIMARY KEY (attribute_type_id), 
        	CHECK (computed IN (0, 1)), 
        	FOREIGN KEY(namespace_id) REFERENCES namespaces (namespace_id), 
        	FOREIGN KEY(updated_by_id) REFERENCES people (id), 
        	FOREIGN KEY(created_by_id) REFERENCES people (id)
        )

    Mixins:

    *   :class:`ggrc.data_platform.base.Base`


``Attributes``
--------------

..  class:: ggrc.data_platform.attributes.Attributes

    Attributes model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE attributes (
        	created_at DATETIME NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	attribute_id INTEGER NOT NULL AUTO_INCREMENT, 
        	object_id INTEGER, 
        	object_type VARCHAR(250), 
        	attribute_definition_id INTEGER, 
        	attribute_template_id INTEGER, 
        	value_string TEXT, 
        	value_integer INTEGER, 
        	value_datetime DATETIME, 
        	source_type VARCHAR(250), 
        	source_id INTEGER, 
        	source_attr VARCHAR(250), 
        	namespace_id INTEGER, 
        	deleted BOOL, 
        	version INTEGER, 
        	updated_by_id INTEGER, 
        	created_by_id INTEGER, 
        	PRIMARY KEY (attribute_id), 
        	CONSTRAINT uq_attributes UNIQUE (object_id, object_type, attribute_definition_id, attribute_template_id), 
        	FOREIGN KEY(attribute_definition_id) REFERENCES attribute_definitions (attribute_definition_id), 
        	FOREIGN KEY(attribute_template_id) REFERENCES attribute_templates (attribute_template_id), 
        	FOREIGN KEY(namespace_id) REFERENCES namespaces (namespace_id), 
        	CHECK (deleted IN (0, 1)), 
        	FOREIGN KEY(updated_by_id) REFERENCES people (id), 
        	FOREIGN KEY(created_by_id) REFERENCES people (id)
        )

    Mixins:

    *   :class:`ggrc.data_platform.base.Base`


``Namespaces``
--------------

..  class:: ggrc.data_platform.namespaces.Namespaces

    Namespaces model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE namespaces (
        	created_at DATETIME NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	namespace_id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(45) NOT NULL, 
        	display_name VARCHAR(255) NOT NULL, 
        	updated_by_id INTEGER, 
        	created_by_id INTEGER, 
        	PRIMARY KEY (namespace_id), 
        	UNIQUE (name), 
        	FOREIGN KEY(updated_by_id) REFERENCES people (id), 
        	FOREIGN KEY(created_by_id) REFERENCES people (id)
        )

    Mixins:

    *   :class:`ggrc.data_platform.base.Base`


``ObjectTemplates``
-------------------

..  class:: ggrc.data_platform.object_templates.ObjectTemplates

    Object Templates model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE object_templates (
        	created_at DATETIME NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	object_template_id INTEGER NOT NULL AUTO_INCREMENT, 
        	object_type_id INTEGER, 
        	name VARCHAR(255) NOT NULL, 
        	display_name VARCHAR(255) NOT NULL, 
        	namespace_id INTEGER, 
        	updated_by_id INTEGER, 
        	created_by_id INTEGER, 
        	PRIMARY KEY (object_template_id), 
        	FOREIGN KEY(object_type_id) REFERENCES object_types (object_type_id), 
        	FOREIGN KEY(namespace_id) REFERENCES namespaces (namespace_id), 
        	FOREIGN KEY(updated_by_id) REFERENCES people (id), 
        	FOREIGN KEY(created_by_id) REFERENCES people (id)
        )

    Mixins:

    *   :class:`ggrc.data_platform.base.Base`


``ObjectTypes``
---------------

..  class:: ggrc.data_platform.object_types.ObjectTypes

    Object types model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE object_types (
        	created_at DATETIME NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	object_type_id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(255) NOT NULL, 
        	display_name VARCHAR(255) NOT NULL, 
        	namespace_id INTEGER, 
        	parent_object_type_id INTEGER, 
        	updated_by_id INTEGER, 
        	created_by_id INTEGER, 
        	PRIMARY KEY (object_type_id), 
        	UNIQUE (name, namespace_id), 
        	FOREIGN KEY(namespace_id) REFERENCES namespaces (namespace_id), 
        	FOREIGN KEY(parent_object_type_id) REFERENCES object_types (object_type_id), 
        	FOREIGN KEY(updated_by_id) REFERENCES people (id), 
        	FOREIGN KEY(created_by_id) REFERENCES people (id)
        )

    Mixins:

    *   :class:`ggrc.data_platform.base.Base`


``AccessGroup``
---------------

..  class:: ggrc.models.access_group.AccessGroup

    ..  warning::
        Missing doc-string of ``ggrc.models.access_group.AccessGroup``

    Schema:

    ..  code-block:: sql

        CREATE TABLE access_groups (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_access_groups UNIQUE (title), 
        	CONSTRAINT uq_access_groups UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Assessment``
--------------

..  class:: ggrc.models.assessment.Assessment

    Class representing Assessment.
    
    Assessment is an object representing an individual assessment performed on
    a specific object during an audit to ascertain whether or not
    certain conditions were met for that object.

    Schema:

    ..  code-block:: sql

        CREATE TABLE assessments (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	recipients VARCHAR(250), 
        	send_by_default BOOL, 
        	status ENUM('In Progress','Not Started','Verified','Deprecated','In Review','Completed') NOT NULL, 
        	design VARCHAR(250), 
        	operationally VARCHAR(250), 
        	audit_id INTEGER NOT NULL, 
        	assessment_type VARCHAR(250) DEFAULT 'Control' NOT NULL, 
        	os_state VARCHAR(250) NOT NULL, 
        	test_plan TEXT, 
        	end_date DATE, 
        	start_date DATE, 
        	finished_date DATETIME, 
        	verified_date DATETIME, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_assessments UNIQUE (slug), 
        	CHECK (send_by_default IN (0, 1)), 
        	FOREIGN KEY(audit_id) REFERENCES audits (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.mixins.statusable.Statusable`
    *   :class:`ggrc.models.mixins.audit_relationship.AuditRelationship`
    *   :class:`ggrc.models.mixins.autostatuschangeable.AutoStatusChangeable`
    *   :class:`ggrc.models.mixins.assignable.Assignable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.TestPlanned`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.comment.Commentable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.mixins.reminderable.Reminderable`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.with_similarity_score.WithSimilarityScore`
    *   :class:`ggrc.models.mixins.FinishedDate`
    *   :class:`ggrc.models.mixins.VerifiedDate`
    *   :class:`ggrc.models.mixins.validate_on_complete.ValidateOnComplete`
    *   :class:`ggrc.models.mixins.notifiable.Notifiable`
    *   :class:`ggrc.models.mixins.with_action.WithAction`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``AssessmentTemplate``
----------------------

..  class:: ggrc.models.assessment_template.AssessmentTemplate

    A class representing the assessment template entity.
    
    An Assessment Template is a template that allows users for easier creation of
    multiple Assessments that are somewhat similar to each other, avoiding the
    need to repeatedly define the same set of properties for every new Assessment
    object.

    Schema:

    ..  code-block:: sql

        CREATE TABLE assessment_templates (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	template_object_type VARCHAR(250), 
        	test_plan_procedure BOOL NOT NULL, 
        	procedure_description TEXT, 
        	default_people TEXT NOT NULL, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	status VARCHAR(250) NOT NULL, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_assessment_templates UNIQUE (slug), 
        	CHECK (test_plan_procedure IN (0, 1)), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.audit_relationship.AuditRelationship`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Audit``
---------

..  class:: ggrc.models.audit.Audit

    Audit model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE audits (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	report_start_date DATE, 
        	report_end_date DATE, 
        	audit_firm_id INTEGER, 
        	gdrive_evidence_folder VARCHAR(250), 
        	program_id INTEGER NOT NULL, 
        	object_type VARCHAR(250) NOT NULL, 
        	archived BOOL NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	secondary_contact_id INTEGER, 
        	contact_id INTEGER, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_audits UNIQUE (title), 
        	FOREIGN KEY(audit_firm_id) REFERENCES org_groups (id), 
        	FOREIGN KEY(program_id) REFERENCES programs (id), 
        	CHECK (archived IN (0, 1)), 
        	FOREIGN KEY(secondary_contact_id) REFERENCES people (id), 
        	FOREIGN KEY(contact_id) REFERENCES people (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_gdrive_integration.models.object_folder.Folderable`
    *   :class:`ggrc.models.snapshot.Snapshotable`
    *   :class:`ggrc.models.mixins.clonable.Clonable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.context.HasOwnContext`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.WithContact`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``AuditObject``
---------------

..  class:: ggrc.models.audit_object.AuditObject

    ..  warning::
        Missing doc-string of ``ggrc.models.audit_object.AuditObject``

    Schema:

    ..  code-block:: sql

        CREATE TABLE audit_objects (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	audit_id INTEGER NOT NULL, 
        	auditable_id INTEGER NOT NULL, 
        	auditable_type VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	UNIQUE (audit_id, auditable_id, auditable_type), 
        	FOREIGN KEY(audit_id) REFERENCES audits (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Automapping``
---------------

..  class:: ggrc.models.automapping.Automapping

    Automapping class
    
    Used to track which relationship objects were created by an
    automapping even if the base relationship was deleted.

    Schema:

    ..  code-block:: sql

        CREATE TABLE automappings (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	relationship_id INTEGER, 
        	source_id INTEGER NOT NULL, 
        	source_type VARCHAR(250) NOT NULL, 
        	destination_id INTEGER NOT NULL, 
        	destination_type VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``BackgroundTask``
------------------

..  class:: ggrc.models.background_task.BackgroundTask

    Background task model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE background_tasks (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(250), 
        	parameters BLOB(16777215), 
        	result BLOB(16777215), 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	status VARCHAR(250) NOT NULL, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.models.mixins.Stateful`


``Categorization``
------------------

..  class:: ggrc.models.categorization.Categorization

    ..  warning::
        Missing doc-string of ``ggrc.models.categorization.Categorization``

    Schema:

    ..  code-block:: sql

        CREATE TABLE categorizations (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	category_id INTEGER NOT NULL, 
        	category_type VARCHAR(250), 
        	categorizable_id INTEGER, 
        	categorizable_type VARCHAR(250), 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(category_id) REFERENCES categories (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``CategoryBase``
----------------

..  class:: ggrc.models.category.CategoryBase

    Base class for Categories

    Schema:

    ..  code-block:: sql

        CREATE TABLE categories (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	type VARCHAR(250), 
        	name VARCHAR(250), 
        	lft INTEGER, 
        	rgt INTEGER, 
        	scope_id INTEGER, 
        	depth INTEGER, 
        	required BOOL, 
        	parent_id INTEGER, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CHECK (required IN (0, 1)), 
        	FOREIGN KEY(parent_id) REFERENCES categories (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Hierarchical`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Clause``
----------

..  class:: ggrc.models.clause.Clause

    ..  warning::
        Missing doc-string of ``ggrc.models.clause.Clause``

    Schema:

    ..  code-block:: sql

        CREATE TABLE clauses (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	na BOOL NOT NULL, 
        	notes TEXT, 
        	os_state VARCHAR(250) NOT NULL, 
        	parent_id INTEGER, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_clauses UNIQUE (title), 
        	CONSTRAINT uq_clauses UNIQUE (slug), 
        	CHECK (na IN (0, 1)), 
        	FOREIGN KEY(parent_id) REFERENCES clauses (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.Hierarchical`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Comment``
-----------

..  class:: ggrc.models.comment.Comment

    Basic comment model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE comments (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	assignee_type VARCHAR(250), 
        	revision_id INTEGER, 
        	custom_attribute_definition_id INTEGER, 
        	description TEXT, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(revision_id) REFERENCES revisions (id) ON DELETE SET NULL, 
        	FOREIGN KEY(custom_attribute_definition_id) REFERENCES custom_attribute_definitions (id) ON DELETE SET NULL, 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.notifiable.Notifiable`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Context``
-----------

..  class:: ggrc.models.context.Context

    ..  warning::
        Missing doc-string of ``ggrc.models.context.Context``

    Schema:

    ..  code-block:: sql

        CREATE TABLE contexts (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(128), 
        	related_object_id INTEGER, 
        	related_object_type VARCHAR(128), 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	description TEXT, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Control``
-----------

..  class:: ggrc.models.control.Control

    ..  warning::
        Missing doc-string of ``ggrc.models.control.Control``

    Schema:

    ..  code-block:: sql

        CREATE TABLE controls (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	company_control BOOL, 
        	directive_id INTEGER, 
        	kind_id INTEGER, 
        	means_id INTEGER, 
        	version VARCHAR(250), 
        	documentation_description TEXT, 
        	verify_frequency_id INTEGER, 
        	fraud_related BOOL, 
        	key_control BOOL, 
        	active BOOL, 
        	principal_assessor_id INTEGER, 
        	secondary_assessor_id INTEGER, 
        	os_state VARCHAR(250) NOT NULL, 
        	parent_id INTEGER, 
        	end_date DATE, 
        	start_date DATE, 
        	test_plan TEXT, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_controls UNIQUE (slug), 
        	CONSTRAINT uq_t_controls UNIQUE (title), 
        	CHECK (company_control IN (0, 1)), 
        	FOREIGN KEY(directive_id) REFERENCES directives (id), 
        	CHECK (fraud_related IN (0, 1)), 
        	CHECK (key_control IN (0, 1)), 
        	CHECK (active IN (0, 1)), 
        	FOREIGN KEY(principal_assessor_id) REFERENCES people (id), 
        	FOREIGN KEY(secondary_assessor_id) REFERENCES people (id), 
        	FOREIGN KEY(parent_id) REFERENCES controls (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_gdrive_integration.models.object_folder.Folderable`
    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.models.mixins.with_last_assessment_date.WithLastAssessmentDate`
    *   :class:`ggrc.models.mixins.attributable.Attributable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.control.ControlCategorized`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.control.AssertionCategorized`
    *   :class:`ggrc.models.categorization.Categorizable`
    *   :class:`ggrc.models.mixins.Hierarchical`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.audit_object.Auditable`
    *   :class:`ggrc.models.mixins.TestPlanned`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``ControlAssertion``
--------------------

..  class:: ggrc.models.control.ControlAssertion

    Custom Assertion class for Control

    Schema:

    ..  code-block:: sql

        CREATE TABLE categories (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	type VARCHAR(250), 
        	name VARCHAR(250), 
        	lft INTEGER, 
        	rgt INTEGER, 
        	scope_id INTEGER, 
        	depth INTEGER, 
        	required BOOL, 
        	parent_id INTEGER, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CHECK (required IN (0, 1)), 
        	FOREIGN KEY(parent_id) REFERENCES categories (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.category.CategoryBase`
    *   :class:`ggrc.models.mixins.Hierarchical`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``ControlCategory``
-------------------

..  class:: ggrc.models.control.ControlCategory

    Custom Category class for Control

    Schema:

    ..  code-block:: sql

        CREATE TABLE categories (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	type VARCHAR(250), 
        	name VARCHAR(250), 
        	lft INTEGER, 
        	rgt INTEGER, 
        	scope_id INTEGER, 
        	depth INTEGER, 
        	required BOOL, 
        	parent_id INTEGER, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CHECK (required IN (0, 1)), 
        	FOREIGN KEY(parent_id) REFERENCES categories (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.category.CategoryBase`
    *   :class:`ggrc.models.mixins.Hierarchical`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``CustomAttributeDefinition``
-----------------------------

..  class:: ggrc.models.custom_attribute_definition.CustomAttributeDefinition

    Custom attribute definition model.
    
    Attributes:
      multi_choice_mandatory: comma separated values of mandatory bitmaps.
        First lsb is for comment, second bit is for attachement.

    Schema:

    ..  code-block:: sql

        CREATE TABLE custom_attribute_definitions (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	definition_type VARCHAR(250) NOT NULL, 
        	definition_id INTEGER, 
        	attribute_type VARCHAR(250) NOT NULL, 
        	multi_choice_options VARCHAR(250), 
        	multi_choice_mandatory VARCHAR(250), 
        	mandatory BOOL, 
        	helptext VARCHAR(250), 
        	placeholder VARCHAR(250), 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	title VARCHAR(250) NOT NULL, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_custom_attribute UNIQUE (definition_type, definition_id, title), 
        	CONSTRAINT uq_t_custom_attribute_definitions UNIQUE (title), 
        	CHECK (mandatory IN (0, 1)), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.attributevalidator.AttributeValidator`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.models.mixins.Titled`


``CustomAttributeValue``
------------------------

..  class:: ggrc.models.custom_attribute_value.CustomAttributeValue

    Custom attribute value model

    Schema:

    ..  code-block:: sql

        CREATE TABLE custom_attribute_values (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	custom_attribute_id INTEGER, 
        	attributable_id INTEGER, 
        	attributable_type VARCHAR(250), 
        	attribute_value VARCHAR(250), 
        	attribute_object_id INTEGER, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	UNIQUE (attributable_id, custom_attribute_id), 
        	FOREIGN KEY(custom_attribute_id) REFERENCES custom_attribute_definitions (id) ON DELETE CASCADE, 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``DataAsset``
-------------

..  class:: ggrc.models.data_asset.DataAsset

    ..  warning::
        Missing doc-string of ``ggrc.models.data_asset.DataAsset``

    Schema:

    ..  code-block:: sql

        CREATE TABLE data_assets (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_data_assets UNIQUE (title), 
        	CONSTRAINT uq_data_assets UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Contract``
------------

..  class:: ggrc.models.directive.Contract

    ..  warning::
        Missing doc-string of ``ggrc.models.directive.Contract``

    Schema:

    ..  code-block:: sql

        CREATE TABLE directives (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	version VARCHAR(250), 
        	organization VARCHAR(250), 
        	scope TEXT, 
        	kind_id INTEGER, 
        	audit_start_date DATETIME, 
        	audit_frequency_id INTEGER, 
        	audit_duration_id INTEGER, 
        	meta_kind VARCHAR(250), 
        	kind VARCHAR(250), 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_directives UNIQUE (slug), 
        	CONSTRAINT uq_t_directives UNIQUE (title), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.directive.Directive`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Directive``
-------------

..  class:: ggrc.models.directive.Directive

    ..  warning::
        Missing doc-string of ``ggrc.models.directive.Directive``

    Schema:

    ..  code-block:: sql

        CREATE TABLE directives (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	version VARCHAR(250), 
        	organization VARCHAR(250), 
        	scope TEXT, 
        	kind_id INTEGER, 
        	audit_start_date DATETIME, 
        	audit_frequency_id INTEGER, 
        	audit_duration_id INTEGER, 
        	meta_kind VARCHAR(250), 
        	kind VARCHAR(250), 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_directives UNIQUE (slug), 
        	CONSTRAINT uq_t_directives UNIQUE (title), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Policy``
----------

..  class:: ggrc.models.directive.Policy

    ..  warning::
        Missing doc-string of ``ggrc.models.directive.Policy``

    Schema:

    ..  code-block:: sql

        CREATE TABLE directives (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	version VARCHAR(250), 
        	organization VARCHAR(250), 
        	scope TEXT, 
        	kind_id INTEGER, 
        	audit_start_date DATETIME, 
        	audit_frequency_id INTEGER, 
        	audit_duration_id INTEGER, 
        	meta_kind VARCHAR(250), 
        	kind VARCHAR(250), 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_directives UNIQUE (slug), 
        	CONSTRAINT uq_t_directives UNIQUE (title), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.directive.Directive`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Regulation``
--------------

..  class:: ggrc.models.directive.Regulation

    ..  warning::
        Missing doc-string of ``ggrc.models.directive.Regulation``

    Schema:

    ..  code-block:: sql

        CREATE TABLE directives (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	version VARCHAR(250), 
        	organization VARCHAR(250), 
        	scope TEXT, 
        	kind_id INTEGER, 
        	audit_start_date DATETIME, 
        	audit_frequency_id INTEGER, 
        	audit_duration_id INTEGER, 
        	meta_kind VARCHAR(250), 
        	kind VARCHAR(250), 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_directives UNIQUE (slug), 
        	CONSTRAINT uq_t_directives UNIQUE (title), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.directive.Directive`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Standard``
------------

..  class:: ggrc.models.directive.Standard

    ..  warning::
        Missing doc-string of ``ggrc.models.directive.Standard``

    Schema:

    ..  code-block:: sql

        CREATE TABLE directives (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	version VARCHAR(250), 
        	organization VARCHAR(250), 
        	scope TEXT, 
        	kind_id INTEGER, 
        	audit_start_date DATETIME, 
        	audit_frequency_id INTEGER, 
        	audit_duration_id INTEGER, 
        	meta_kind VARCHAR(250), 
        	kind VARCHAR(250), 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_directives UNIQUE (slug), 
        	CONSTRAINT uq_t_directives UNIQUE (title), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.directive.Directive`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Document``
------------

..  class:: ggrc.models.document.Document

    Audit model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE documents (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	title VARCHAR(250), 
        	link VARCHAR(250), 
        	description TEXT, 
        	kind_id INTEGER, 
        	year_id INTEGER, 
        	language_id INTEGER, 
        	document_type ENUM('URL','EVIDENCE','REFERENCE_URL') NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(kind_id) REFERENCES options (id), 
        	FOREIGN KEY(year_id) REFERENCES options (id), 
        	FOREIGN KEY(language_id) REFERENCES options (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_gdrive_integration.models.object_file.Fileable`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Event``
---------

..  class:: ggrc.models.event.Event

    ..  warning::
        Missing doc-string of ``ggrc.models.event.Event``

    Schema:

    ..  code-block:: sql

        CREATE TABLE events (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	action ENUM('POST','PUT','DELETE','BULK','GET') NOT NULL, 
        	resource_id INTEGER, 
        	resource_type VARCHAR(250), 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Facility``
------------

..  class:: ggrc.models.facility.Facility

    ..  warning::
        Missing doc-string of ``ggrc.models.facility.Facility``

    Schema:

    ..  code-block:: sql

        CREATE TABLE facilities (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_facilities UNIQUE (title), 
        	CONSTRAINT uq_facilities UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Help``
--------

..  class:: ggrc.models.help.Help

    ..  warning::
        Missing doc-string of ``ggrc.models.help.Help``

    Schema:

    ..  code-block:: sql

        CREATE TABLE helps (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	content TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_helps UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Issue``
---------

..  class:: ggrc.models.issue.Issue

    Issue Model.

    Schema:

    ..  code-block:: sql

        CREATE TABLE issues (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	audit_id INTEGER, 
        	os_state VARCHAR(250) NOT NULL, 
        	test_plan TEXT, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_issues UNIQUE (title), 
        	CONSTRAINT uq_issues UNIQUE (slug), 
        	FOREIGN KEY(audit_id) REFERENCES audits (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.TestPlanned`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.audit_relationship.AuditRelationship`
    *   :class:`ggrc.models.mixins.with_action.WithAction`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Market``
----------

..  class:: ggrc.models.market.Market

    ..  warning::
        Missing doc-string of ``ggrc.models.market.Market``

    Schema:

    ..  code-block:: sql

        CREATE TABLE markets (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_markets UNIQUE (title), 
        	CONSTRAINT uq_markets UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Meeting``
-----------

..  class:: ggrc.models.meeting.Meeting

    ..  warning::
        Missing doc-string of ``ggrc.models.meeting.Meeting``

    Schema:

    ..  code-block:: sql

        CREATE TABLE meetings (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	start_at DATETIME NOT NULL, 
        	end_at DATETIME NOT NULL, 
        	title VARCHAR(250) NOT NULL, 
        	description TEXT, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_gdrive_integration.models.object_event.Eventable`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Notification``
----------------

..  class:: ggrc.models.notification.Notification

    ..  warning::
        Missing doc-string of ``ggrc.models.notification.Notification``

    Schema:

    ..  code-block:: sql

        CREATE TABLE notifications (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	object_id INTEGER NOT NULL, 
        	object_type VARCHAR(250) NOT NULL, 
        	send_on DATETIME NOT NULL, 
        	sent_at DATETIME, 
        	custom_message TEXT, 
        	force_notifications BOOL NOT NULL, 
        	repeating BOOL NOT NULL, 
        	notification_type_id INTEGER NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CHECK (force_notifications IN (0, 1)), 
        	CHECK (repeating IN (0, 1)), 
        	FOREIGN KEY(notification_type_id) REFERENCES notification_types (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``NotificationConfig``
----------------------

..  class:: ggrc.models.notification.NotificationConfig

    ..  warning::
        Missing doc-string of ``ggrc.models.notification.NotificationConfig``

    Schema:

    ..  code-block:: sql

        CREATE TABLE notification_configs (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(250), 
        	enable_flag BOOL, 
        	notif_type VARCHAR(250), 
        	person_id INTEGER NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CHECK (enable_flag IN (0, 1)), 
        	FOREIGN KEY(person_id) REFERENCES people (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``NotificationType``
--------------------

..  class:: ggrc.models.notification.NotificationType

    ..  warning::
        Missing doc-string of ``ggrc.models.notification.NotificationType``

    Schema:

    ..  code-block:: sql

        CREATE TABLE notification_types (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	name VARCHAR(250) NOT NULL, 
        	description VARCHAR(250), 
        	advance_notice DATETIME, 
        	template VARCHAR(250), 
        	instant BOOL NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CHECK (instant IN (0, 1)), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``ObjectPerson``
----------------

..  class:: ggrc.models.object_person.ObjectPerson

    ..  warning::
        Missing doc-string of ``ggrc.models.object_person.ObjectPerson``

    Schema:

    ..  code-block:: sql

        CREATE TABLE object_people (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	role VARCHAR(250), 
        	notes TEXT, 
        	person_id INTEGER NOT NULL, 
        	personable_id INTEGER NOT NULL, 
        	personable_type VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	UNIQUE (person_id, personable_id, personable_type), 
        	FOREIGN KEY(person_id) REFERENCES people (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Objective``
-------------

..  class:: ggrc.models.objective.Objective

    ..  warning::
        Missing doc-string of ``ggrc.models.objective.Objective``

    Schema:

    ..  code-block:: sql

        CREATE TABLE objectives (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	os_state VARCHAR(250) NOT NULL, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_objectives UNIQUE (title), 
        	CONSTRAINT uq_objectives UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.models.mixins.with_last_assessment_date.WithLastAssessmentDate`
    *   :class:`ggrc.models.mixins.attributable.Attributable`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.audit_object.Auditable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Option``
----------

..  class:: ggrc.models.option.Option

    ..  warning::
        Missing doc-string of ``ggrc.models.option.Option``

    Schema:

    ..  code-block:: sql

        CREATE TABLE options (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	role VARCHAR(250), 
        	title VARCHAR(250), 
        	required BOOL, 
        	description TEXT, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CHECK (required IN (0, 1)), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``OrgGroup``
------------

..  class:: ggrc.models.org_group.OrgGroup

    ..  warning::
        Missing doc-string of ``ggrc.models.org_group.OrgGroup``

    Schema:

    ..  code-block:: sql

        CREATE TABLE org_groups (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_org_groups UNIQUE (title), 
        	CONSTRAINT uq_org_groups UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Person``
----------

..  class:: ggrc.models.person.Person

    ..  warning::
        Missing doc-string of ``ggrc.models.person.Person``

    Schema:

    ..  code-block:: sql

        CREATE TABLE people (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	email VARCHAR(250) NOT NULL, 
        	name VARCHAR(250), 
        	language_id INTEGER, 
        	company VARCHAR(250), 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.custom_attribute_definition.CustomAttributeMapable`
    *   :class:`ggrc.models.context.HasOwnContext`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Product``
-----------

..  class:: ggrc.models.product.Product

    ..  warning::
        Missing doc-string of ``ggrc.models.product.Product``

    Schema:

    ..  code-block:: sql

        CREATE TABLE products (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	kind_id INTEGER, 
        	version VARCHAR(250), 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_products UNIQUE (title), 
        	CONSTRAINT uq_products UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Program``
-----------

..  class:: ggrc.models.program.Program

    ..  warning::
        Missing doc-string of ``ggrc.models.program.Program``

    Schema:

    ..  code-block:: sql

        CREATE TABLE programs (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	kind VARCHAR(250), 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_programs UNIQUE (title), 
        	CONSTRAINT uq_programs UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_gdrive_integration.models.object_folder.Folderable`
    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_risk_assessments.MixRiskAssessmentsIntoProgram`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.context.HasOwnContext`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Project``
-----------

..  class:: ggrc.models.project.Project

    ..  warning::
        Missing doc-string of ``ggrc.models.project.Project``

    Schema:

    ..  code-block:: sql

        CREATE TABLE projects (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_projects UNIQUE (title), 
        	CONSTRAINT uq_projects UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``Relationship``
----------------

..  class:: ggrc.models.relationship.Relationship

    ..  warning::
        Missing doc-string of ``ggrc.models.relationship.Relationship``

    Schema:

    ..  code-block:: sql

        CREATE TABLE relationships (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	source_id INTEGER NOT NULL, 
        	source_type VARCHAR(250) NOT NULL, 
        	destination_id INTEGER NOT NULL, 
        	destination_type VARCHAR(250) NOT NULL, 
        	parent_id INTEGER, 
        	automapping_id INTEGER, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	UNIQUE (source_id, source_type, destination_id, destination_type), 
        	FOREIGN KEY(parent_id) REFERENCES relationships (id) ON DELETE SET NULL, 
        	FOREIGN KEY(automapping_id) REFERENCES automappings (id) ON DELETE CASCADE, 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``RelationshipAttr``
--------------------

..  class:: ggrc.models.relationship.RelationshipAttr

    Extended attributes for relationships. Used to store relations meta-data
    so the Relationship table can be used in place of join-tables that carry
    extra information

    Schema:

    ..  code-block:: sql

        CREATE TABLE relationship_attrs (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	relationship_id INTEGER NOT NULL, 
        	attr_name VARCHAR(250) NOT NULL, 
        	attr_value VARCHAR(250) NOT NULL, 
        	PRIMARY KEY (id, relationship_id), 
        	FOREIGN KEY(relationship_id) REFERENCES relationships (id) ON DELETE CASCADE
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Identifiable`


``Revision``
------------

..  class:: ggrc.models.revision.Revision

    Revision object holds a JSON snapshot of the object at a time.

    Schema:

    ..  code-block:: sql

        CREATE TABLE revisions (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	resource_id INTEGER NOT NULL, 
        	resource_type VARCHAR(250) NOT NULL, 
        	event_id INTEGER NOT NULL, 
        	action ENUM('created','modified','deleted') NOT NULL, 
        	content TEXT NOT NULL, 
        	resource_slug VARCHAR(250), 
        	source_type VARCHAR(250), 
        	source_id INTEGER, 
        	destination_type VARCHAR(250), 
        	destination_id INTEGER, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	FOREIGN KEY(event_id) REFERENCES events (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Section``
-----------

..  class:: ggrc.models.section.Section

    ..  warning::
        Missing doc-string of ``ggrc.models.section.Section``

    Schema:

    ..  code-block:: sql

        CREATE TABLE sections (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	na BOOL NOT NULL, 
        	notes TEXT, 
        	os_state VARCHAR(250) NOT NULL, 
        	parent_id INTEGER, 
        	status VARCHAR(250) NOT NULL, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_sections UNIQUE (title), 
        	CONSTRAINT uq_sections UNIQUE (slug), 
        	CHECK (na IN (0, 1)), 
        	FOREIGN KEY(parent_id) REFERENCES sections (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.Hierarchical`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.fulltext.mixin.Indexed`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Snapshot``
------------

..  class:: ggrc.models.snapshot.Snapshot

    Snapshot object that holds a join of parent object, revision, child object
    and parent object's context.
    
    Conceptual model is that we have a parent snapshotable object (e.g. Audit)
    which will not create relationships to objects with automapper at the time of
    creation but will instead create snapshots of those objects based on the
    latest revision of the object at the time of create / update of the object.
    Objects that were supposed to be mapped are called child objects.

    Schema:

    ..  code-block:: sql

        CREATE TABLE snapshots (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	parent_id INTEGER NOT NULL, 
        	parent_type VARCHAR(250) NOT NULL, 
        	child_id INTEGER NOT NULL, 
        	child_type VARCHAR(250) NOT NULL, 
        	revision_id INTEGER NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	UNIQUE (parent_type, parent_id, child_type, child_id), 
        	FOREIGN KEY(revision_id) REFERENCES revisions (id), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.with_last_assessment_date.WithLastAssessmentDate`
    *   :class:`ggrc.models.mixins.attributable.Attributable`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Process``
-----------

..  class:: ggrc.models.system.Process

    ..  warning::
        Missing doc-string of ``ggrc.models.system.Process``

    Schema:

    ..  code-block:: sql

        CREATE TABLE systems (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	infrastructure BOOL, 
        	is_biz_process BOOL, 
        	version VARCHAR(250), 
        	network_zone_id INTEGER, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_systems UNIQUE (title), 
        	CONSTRAINT uq_systems UNIQUE (slug), 
        	CHECK (infrastructure IN (0, 1)), 
        	CHECK (is_biz_process IN (0, 1)), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.system.SystemOrProcess`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``System``
----------

..  class:: ggrc.models.system.System

    ..  warning::
        Missing doc-string of ``ggrc.models.system.System``

    Schema:

    ..  code-block:: sql

        CREATE TABLE systems (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	infrastructure BOOL, 
        	is_biz_process BOOL, 
        	version VARCHAR(250), 
        	network_zone_id INTEGER, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_systems UNIQUE (title), 
        	CONSTRAINT uq_systems UNIQUE (slug), 
        	CHECK (infrastructure IN (0, 1)), 
        	CHECK (is_biz_process IN (0, 1)), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_risks.models.risk_object.Riskable`
    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.system.SystemOrProcess`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


``SystemOrProcess``
-------------------

..  class:: ggrc.models.system.SystemOrProcess

    ..  warning::
        Missing doc-string of ``ggrc.models.system.SystemOrProcess``

    Schema:

    ..  code-block:: sql

        CREATE TABLE systems (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	infrastructure BOOL, 
        	is_biz_process BOOL, 
        	version VARCHAR(250), 
        	network_zone_id INTEGER, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_systems UNIQUE (title), 
        	CONSTRAINT uq_systems UNIQUE (slug), 
        	CHECK (infrastructure IN (0, 1)), 
        	CHECK (is_biz_process IN (0, 1)), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`


``Vendor``
----------

..  class:: ggrc.models.vendor.Vendor

    ..  warning::
        Missing doc-string of ``ggrc.models.vendor.Vendor``

    Schema:

    ..  code-block:: sql

        CREATE TABLE vendors (
        	id INTEGER NOT NULL AUTO_INCREMENT, 
        	os_state VARCHAR(250) NOT NULL, 
        	end_date DATE, 
        	start_date DATE, 
        	status VARCHAR(250) NOT NULL, 
        	notes TEXT, 
        	description TEXT, 
        	title VARCHAR(250) NOT NULL, 
        	slug VARCHAR(250) NOT NULL, 
        	updated_at DATETIME NOT NULL, 
        	modified_by_id INTEGER, 
        	created_at DATETIME NOT NULL, 
        	context_id INTEGER, 
        	PRIMARY KEY (id), 
        	CONSTRAINT uq_t_vendors UNIQUE (title), 
        	CONSTRAINT uq_vendors UNIQUE (slug), 
        	FOREIGN KEY(context_id) REFERENCES contexts (id)
        )

    Mixins:

    *   :class:`ggrc_workflows.models.task_group_object.TaskGroupable`
    *   :class:`ggrc_workflows.models.cycle_task_group_object_task.CycleTaskable`
    *   :class:`ggrc_workflows.models.workflow.WorkflowState`
    *   :class:`ggrc.access_control.roleable.Roleable`
    *   :class:`ggrc.models.track_object_state.HasObjectState`
    *   :class:`ggrc.models.mixins.customattributable.CustomAttributable`
    *   :class:`ggrc.models.object_person.Personable`
    *   :class:`ggrc.models.relationship.Relatable`
    *   :class:`ggrc.models.mixins.LastDeprecatedTimeboxed`
    *   :class:`ggrc.models.mixins.Timeboxed`
    *   :class:`ggrc.models.object_document.PublicDocumentable`
    *   :class:`ggrc.models.object_document.Documentable`
    *   :class:`ggrc.models.mixins.BusinessObject`
    *   :class:`ggrc.models.mixins.Stateful`
    *   :class:`ggrc.models.mixins.Noted`
    *   :class:`ggrc.models.mixins.Described`
    *   :class:`ggrc.models.mixins.Titled`
    *   :class:`ggrc.models.mixins.Slugged`
    *   :class:`ggrc.models.mixins.Base`
    *   :class:`ggrc.models.mixins.ChangeTracked`
    *   :class:`ggrc.models.mixins.ContextRBAC`
    *   :class:`ggrc.models.mixins.Identifiable`
    *   :class:`ggrc.fulltext.mixin.Indexed`


